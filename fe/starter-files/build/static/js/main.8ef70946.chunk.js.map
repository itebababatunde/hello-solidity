{"version":3,"sources":["util/interact.js","alchemylogo.svg","HelloWorld.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","web3","createAlchemyWeb3","contractAddress","contractABI","helloWorldContract","eth","Contract","loadCurrentMessage","a","methods","message","call","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","target","href","getCurrentWalletConnected","length","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","params","txHash","HelloWorld","useState","walletAddress","setWallet","setStatus","setMessage","newMessage","setNewMessage","addWalletListener","on","accounts","useEffect","events","UpdatedMessages","error","returnValues","connectWalletPressed","walletResponse","onUpdatePressed","id","src","alchemylogo","alt","onClick","String","substring","style","paddingTop","type","placeholder","onChange","e","value","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ef70946.chunk.js","sourcesContent":["\n\nrequire('dotenv').config()\nconst { createAlchemyWeb3 } = require('@alch/alchemy-web3')\nconst web3 = createAlchemyWeb3('wss://eth-ropsten.alchemyapi.io/v2/1G1A4YYYT-l2-GFz6x2vBUBLZQezJ48E')\nconst contractAddress = '0xeCB9CeFc01cBFb292871f0AB52fa9C9b45c82dF5'\nconst contractABI = require('../contract-abi.json')\n\nexport const helloWorldContract = new web3.eth.Contract(contractABI, contractAddress)\nexport const loadCurrentMessage = async () => {\n  const message = await helloWorldContract.methods.message().call()\n  return message\n}\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      })\n      const obj = {\n        status: '👆🏽 Write a message in the text-field above.',\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: '',\n        status: '😥 ' + err.message,\n      }\n    }\n  } else {\n    return {\n      address: '',\n      status: (\n        <span>\n          <p>\n            {' '}\n            🦊{' '}\n            <a target='_blank' href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_accounts',\n      })\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: '👆🏽 Write a message in the text-field above.',\n        }\n      } else {\n        return {\n          address: '',\n          status: '🦊 Connect to Metamask using the top right button.',\n        }\n      }\n    } catch (err) {\n      return {\n        address: '',\n        status: '😥 ' + err.message,\n      }\n    }\n  } else {\n    return {\n      address: '',\n      status: (\n        <span>\n          <p>\n            {' '}\n            🦊{' '}\n            <a target='_blank' href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n\nexport const updateMessage = async (address, message) => {\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        '💡 Connect your Metamask wallet to update the message on the blockchain.',\n    }\n  }\n\n  if (message.trim() === '') {\n    return {\n      status: '❌ Your message cannot be an empty string.',\n    }\n  }\n\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI(),\n  }\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters],\n    })\n    return {\n      status: (\n        <span>\n          ✅{' '}\n          <a target='_blank' href={`https://ropsten.etherscan.io/tx/${txHash}`}>\n            View the status of your transaction on Etherscan!\n          </a>\n          <br />\n          ℹ️ Once the transaction is verified by the network, the message will\n          be updated automatically.\n        </span>\n      ),\n    }\n  } catch (error) {\n    return {\n      status: '😥 ' + error.message,\n    }\n  }\n\n}","export default __webpack_public_path__ + \"static/media/alchemylogo.f670e5f2.svg\";","/* eslint-disable no-unused-vars */\n// eslint-disable\n\nimport React from 'react'\nimport { useEffect, useState } from 'react'\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n} from './util/interact.js'\n\nimport alchemylogo from './alchemylogo.svg'\n\nconst HelloWorld = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState('')\n  const [status, setStatus] = useState('')\n  const [message, setMessage] = useState('No connection to the network.') //default message\n  const [newMessage, setNewMessage] = useState('')\n\n  //called only once\n\n  // useEffect(() => {\n  //   async function fetchData() {\n  //     const message = await loadCurrentMessage()\n  //     setMessage(message)\n  //   }\n  //   fetchData()\n  // }, []) // Or [] if effect doesn't need props or state\n\n  useEffect(async () => {\n    const message = await loadCurrentMessage()\n    setMessage(message)\n    addSmartContractListener()\n\n    const { address, status } = await getCurrentWalletConnected()\n    setWallet(address)\n    setStatus(status)\n    addWalletListener()\n\n\n  }, [])\n\nfunction addSmartContractListener() {\n  helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n    if (error) {\n      setStatus('😥 ' + error.message)\n    } else {\n      setMessage(data.returnValues[1])\n      setNewMessage('')\n      setStatus('🎉 Your message has been updated!')\n    }\n  })\n}\nfunction addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on('accountsChanged', (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0])\n        setStatus('👆🏽 Write a message in the text-field above.')\n      } else {\n        setWallet('')\n        setStatus('🦊 Connect to Metamask using the top right button.')\n      }\n    })\n  } else {\n    setStatus(\n      <p>\n        {' '}\n        🦊{' '}\n        <a target='_blank' href={`https://metamask.io/download.html`}>\n          You must install Metamask, a virtual Ethereum wallet, in your browser.\n        </a>\n      </p>\n    )\n  }\n}\n\nconst connectWalletPressed = async () => {\n  const walletResponse = await connectWallet()\n  setStatus(walletResponse.status)\n  setWallet(walletResponse.address)\n}\n\n\n const onUpdatePressed = async () => {\n   const { status } = await updateMessage(walletAddress, newMessage)\n   setStatus(status)\n }\n\n\n  //the UI of our component\n  return (\n    <div id='container'>\n      <img id='logo' src={alchemylogo} alt=''></img>\n      <button id='walletButton' onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          'Connected: ' +\n          String(walletAddress).substring(0, 6) +\n          '...' +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: '50px' }}>Current Message:</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: '18px' }}>New Message:</h2>\n\n      <div>\n        <input\n          type='text'\n          placeholder='Update the message in your smart contract.'\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id='status'>{status}</p>\n\n        <button id='publish' onClick={onUpdatePressed}>\n          Update\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default HelloWorld\n","import HelloWorld from './HelloWorld'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <HelloWorld></HelloWorld>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}